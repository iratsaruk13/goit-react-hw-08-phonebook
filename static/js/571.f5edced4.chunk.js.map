{"version":3,"file":"static/js/571.f5edced4.chunk.js","mappings":"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","sources":["components/FormContact/FormContact.styled.jsx","components/Contacts/Contacts.styled.jsx","redux/selectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/FormContact/FormContact.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 0 auto;\n`;\n\nexport const FormGroup = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n  \n`\n\nexport const FormLabel = styled.label`\n  margin-right: auto;\n  padding: 5px;\n  color: #1677ff;\n\n  @media screen and (min-width: 375px) {\n    font-size: 16px;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  padding: 10px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  font-size: 16px;\n  color: #555;\n  outline: none;\n  min-width: 250px;\n  &:focus {\n    border-color: #1677ff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n  }\n`;\n\nexport const Error = styled.div`\n  color: red;\n  @media screen and (min-width: 375px) {\n    font-size: 12px;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const FormButton = styled.button`\n  position: relative;\n  margin: auto;\n  padding: 12px 18px;\n  transition: all 0.2s ease;\n  border: none;\n  background: none;\n  &:before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: block;\n    border-radius: 50px;\n    background: #c1eacd;\n    width: 45px;\n    height: 45px;\n    transition: all 0.3s ease;\n  }\n  &:hover:before {\n    width: 100%;\n    background: #97d1a7;\n  }\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nexport const FormButtonSpan = styled.span`\n  position: relative;\n  font-size: 18px;\n  font-weight: 700;\n  letter-spacing: 0.05em;\n  color: #1e6610;\n`;\n\nexport const FormButtonSvg = styled.svg`\n  position: relative;\n  top: 0;\n  margin-left: 10px;\n  fill: none;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke: #126a01;\n  stroke-width: 2;\n  transform: translateX(-5px);\n  transition: all 0.3s ease;\n  &:hover {\n    transform: translateX(0);\n  }\n`;\nexport const InputWrapper = styled.div`\n  display: flex;\n`;\n","import styled from \"styled-components\";\n\nexport const ContactsTitle = styled.h2`\n  color: #1677ff;\n  padding: 20px;\n  font-size: 24px;\n  @media screen and (min-width: 768px) {\n    font-size: 36px;\n  }\n`;\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const ContactsName = styled.p`\n  color: #1677ff;\n  font-size: 18px;\n`;\n\nexport const ContactsButton = styled.button`\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  background: red;\n  border: none;\n  border-radius: 5px;\n  box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.15);\n  background: #e62222;\n  transition: 200ms;\n  &:hover {\n    background: #ff3636;\n  }\n  &:focus {\n    outline: none;\n  }\n  :active {\n    transform: scale(0.8);\n  }\n`;\n\nexport const ContactsButtonText = styled.span`\n  color: white;\n  font-weight: bold;\n`;\n","export const selectContacts = (state) => state.contacts.array;\nexport const selectFilters = (state) => state.filters.value;\nexport const selectIsLoading = (state) => state.contacts.isLoading;\nexport const selectError = (state) => state.contacts.error;\n","import React from \"react\";\nimport {\n  ContactsList,\n  ContactsItem,\n  ContactsName,\n  ContactsButton,\n  ContactsButtonText,\n} from \"./Contacts.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts, selectFilters } from \"../../redux/selectors\";\nimport { removeContact } from \"../../redux/operations\";\n\nexport const Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n\n  const getContact = () => {\n    const normalized = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalized)\n    );\n  };\n\n  const deleteContact = (id) => {\n    dispatch(removeContact(id));\n  };\n\n  const filteredContacts = getContact();\n\n  const formattedNumber = (number) => {\n    const isFormatted = /^\\d{3}-\\d{2}(-\\d{2})+$/.test(number);\n\n    if (isFormatted) {\n      return number;\n    } else {\n      const digitsOnly = number.replace(/\\D/g, \"\");\n\n      let formattedNumber = digitsOnly.substring(0, 3) + \"-\";\n      for (let i = 3; i < digitsOnly.length; i += 1) {\n        if ((i - 3) % 2 === 0 && i !== 3) {\n          formattedNumber += \"-\";\n        }\n\n        formattedNumber += digitsOnly[i];\n      }\n      return formattedNumber;\n    }\n  };\n\n  return (\n    <>\n      <ContactsList>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactsItem key={id}>\n              <ContactsName>\n                {name}: {formattedNumber(number)}\n              </ContactsName>\n              <ContactsButton type=\"button\" onClick={() => deleteContact(id)}>\n                <ContactsButtonText>Delete</ContactsButtonText>\n              </ContactsButton>\n            </ContactsItem>\n          );\n        })}\n      </ContactsList>\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n`;\n\nexport const FilterLabel = styled.label`\n  display: block;\n  margin-right: auto;\n  font-size: 18px;\n  color: #1677ff;\n  @media screen and (min-width: 375px) {\n    font-size: 16px;\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 20px;\n  }\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  font-size: 16px;\n  color: #555;\n  outline: none;\n  min-width: 250px;\n\n  &:focus {\n    border-bottom: 2px solid #1677ff;\n    border-radius: 4px 4px 2px 2px;\n  }\n  &:hover {\n    outline: 1px solid lightgrey;\n  }\n`;\n\nexport const Message = styled.p`\n  font-size: 18px;\n  color: #b70505;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledForm, FilterLabel, FilterInput } from \"./Filter.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilters } from \"../../redux/selectors\";\nimport { setFilter } from \"../../redux/filtersSlice\";\n\nexport const FormFilter = ({ label }) => {\n  const filters = useSelector(selectFilters);\n  const dispatch = useDispatch();\n  const initialValues = {\n    filter: \"\",\n  };\n\n  const onChangeFilter = (evt) => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <StyledForm initialValues={initialValues}>\n      <FilterLabel htmlFor=\"filter\">{label}</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        id=\"filter\"\n        name={filters.query}\n        onChange={onChangeFilter}\n      />\n    </StyledForm>\n  );\n};\n\nFormFilter.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport {\n  StyledForm,\n  FormLabel,\n  FormInput,\n  Error,\n  FormButton,\n  FormButtonSpan,\n  InputWrapper,\n} from \"./FormContact.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"../../redux/selectors\";\nimport { addContacts } from \"../../redux/operations\";\n\nconst phoneValidation =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst schema = Yup.object().shape({\n  name: Yup.string().required(\"The field Name is required\"),\n  number: Yup.string()\n    .required(\"The field Number is required\")\n    .min(7, \"The number must be at least 7 digits long\")\n    .max(14, \"The number can consist of maximum 14 digits\")\n    .matches(phoneValidation, \"The number must consist of digits\"),\n});\n\nexport const FormContact = () => {\n  const contact = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = (data) => {\n    addContact(data.name, data.number);\n    reset();\n  };\n\n  const addContact = (name, number) => {\n    const checkName = contact.some(\n      (el) => el.name.toLowerCase() === name.toLowerCase()\n    );\n    if (checkName) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    dispatch(addContacts({ name, number }));\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit(onSubmit)}>\n      <InputWrapper>\n        <FormLabel htmlFor=\"name\">Name:</FormLabel>\n        <FormInput type=\"text\" id=\"name\" {...register(\"name\")} />\n        {errors.name && <Error> {errors.name?.message}</Error>}\n      </InputWrapper>\n      <InputWrapper>\n        <FormLabel htmlFor=\"number\">Number:</FormLabel>\n        <FormInput type=\"tel\" id=\"number\" {...register(\"number\")} />\n        {errors.number && <Error> {errors.number?.message}</Error>}\n      </InputWrapper>\n\n      <FormButton type=\"submit\">\n        <FormButtonSpan>Add contact </FormButtonSpan>\n      </FormButton>\n    </StyledForm>\n  );\n};\n","import { Container } from \"components/App.styled\";\nimport { Contacts } from \"components/Contacts/Contacts\";\nimport { ContactsTitle } from \"components/Contacts/Contacts.styled\";\nimport { FormFilter } from \"components/Filter/Filter\";\nimport { Message } from \"components/Filter/Filter.styled\";\nimport { FormContact } from \"components/FormContact/FormContact\";\nimport { Loader } from \"components/Loader/Loader\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/operations\";\nimport { selectContacts, selectError, selectIsLoading } from \"redux/selectors\";\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Container>\n        <ContactsTitle>Phonebook</ContactsTitle>\n        <FormContact />\n        {isLoading && !error && <Loader />}\n        <ContactsTitle>Contacts</ContactsTitle>\n        <FormFilter label=\"Find contacts by name\" />\n        {contacts.length === 0 ? (\n          <Message>You don't have contacts yet</Message>\n        ) : (\n          <Contacts />\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","FormGroup","_templateObject2","FormLabel","_templateObject3","FormInput","_templateObject4","Error","_templateObject5","FormButton","_templateObject6","FormButtonSpan","_templateObject7","FormButtonSvg","_templateObject8","InputWrapper","_templateObject9","ContactsTitle","ContactsList","ContactsItem","ContactsName","ContactsButton","ContactsButtonText","selectContacts","state","contacts","array","selectFilters","filters","value","selectIsLoading","isLoading","selectError","error","Contacts","useSelector","filter","dispatch","useDispatch","filteredContacts","normalized","toLowerCase","contact","name","includes","getContact","formattedNumber","number","test","digitsOnly","replace","substring","i","length","_jsx","_Fragment","children","map","_ref","id","_jsxs","type","onClick","removeContact","deleteContact","FilterLabel","FilterInput","Message","FormFilter","label","initialValues","htmlFor","query","onChange","evt","setFilter","currentTarget","schema","Yup","shape","required","min","max","matches","FormContact","_errors$name","_errors$number","_useForm","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","addContact","some","el","alert","concat","addContacts","onSubmit","data","_objectSpread","message","useEffect","fetchContacts","Container","Loader"],"sourceRoot":""}